if &compatible
  set nocompatible
endif
" ================================
" Environment/Supports {{{1
" ================================
function! GetEnvPath(value, defaultv)
    let env = ('' == a:value) ? a:defaultv : a:value
    return env
endfunction

function! VimrcEnvironment()
    let tmp = GetEnvPath($TMP, GetEnvPath($XDG_CACHE_HOME, '/tmp')) . '/.vim_tmp'
    let env = {
                \   'is_win'    : has('win32') || has('win64'),
                \   'gui_loaded' : has('gui-running') || exists('g:GuiLoaded'),
                \ }
    let user_dir =  '~/.vim'
    let plgid = 'Shougo/dein.vim'
    let repo = 'github.com'
    let env.path = {
                \ 	'user'  : user_dir,
                \   'local' : 'conf.d',
                \ 	'tmp'   : tmp
                \ }
    let env.plugin = {
                \   'url'   : 'https://' . repo . '/' . plgid,
                \   'cache' : env.path.tmp . '/deincache',
                \   'path'  : user_dir . '/dein',
                \   'mpath' : user_dir . '/dein/repos/' . repo . '/' . plgid,
                \   'cnf'   : expand('~/dotfiles/dein.toml'),
                \   'cnflz' : expand('~/dotfiles/deinlazy.toml')
                \ }
    ".cacheの作成場所を制御する
    let $XDG_CACHE_HOME = env.path.tmp
	let $mynotedir = expand('~/note')
    return env
endfunction

function! VimrcSupports()
    let supports = {}
    let supports.git = executable('git')
    let supports.plugin = 0
    let supports.plugin_loaded = 0
    return supports
endfunction

function! InstallIfNot(dlurl,dlpath)
    " <TODO> catch error download
    if !isdirectory( expand( a:dlpath ))
        if g:supports.git
            try
                execute('r !git clone ' . a:dlurl . ' ' . expand(a:dlpath))
            catch /:E117:/
                echo 'E117: Fail to git clone(' . a:dlurl .')'
                return 0
            endtry
            return 1
        else
            echo 'Error: Cannot fetch ' . a:dlurl
            return 0
        endif
    endif
    return 1
endfunction

let s:env = VimrcEnvironment()
if !has('g:supports')
    let g:supports = VimrcSupports()
endif

" ================================
"}}}1
" ================================

"---------------------------------
" Install Plugins {{{1
"---------------------------------
"once indent off to load
filetype indent off
if g:supports.plugin == 0
    let g:supports.plugin = InstallIfNot( s:env.plugin.url , s:env.plugin.mpath )
endif

if g:supports.plugin == 1
    " Load Plugins
    execute 'set runtimepath+=' . s:env.plugin.mpath
    if dein#load_state(expand(s:env.plugin.cache))
        call dein#begin(s:env.plugin.path)
        call dein#load_toml(s:env.plugin.cnf, {'lazy' : 0})
        call dein#load_toml(s:env.plugin.cnflz, {'lazy' : 1})
        call dein#end()
        call dein#save_state()
    endif
    " vimproc -> 他pluginにすることで高速インストールを試みる
    "if dein#check_install(['vimproc'])
    "    let g:dein#enable_notification = 0
    "    call dein#install(['vimproc'])
    "end
    if dein#check_install()
        let g:dein#install_progress_type = 'title'
        let g:dein#enable_notification = 1
        call dein#install()
    end
    let g:supports.plugin_loaded = 1
    " Update Command
    command! UpdateDein :call dein#update()
endif

"------------------------------
"  }}}1 Install Plugins
"------------------------------

"==================================
" VIM General Settings
"==================================
"set list
"set listchars=tab:≫-,trail:-,extends:≫,precedes:≪,nbsp:%,eol:?
set wrap
set textwidth=0
set colorcolumn=80
set noswapfile
set nobackup
set noundofile
set tabstop=4
set shiftwidth=4
set clipboard+=unnamed  "Enable Windows Clipbord
set backspace=indent,eol,start
set number
set splitbelow "新しいウィンドウを下に開く
set splitright "新しいウィンドウを右に開く
set foldmethod=marker
set ruler
set incsearch
set showcmd
set title
set laststatus=2
set modeline
set modelines=5
set smarttab
set expandtab

if !s:env.is_win
    set t_Co=256
endif
set printoptions+=formfeed:y
set printheader=%=Page%N

"Filetype indent {{{
if has('autocmd')
    "ファイルタイプの検索を有効にする
    filetype plugin on
    "そのファイルタイプにあわせたインデントを利用する
    filetype indent on
    autocmd FileType ruby       setlocal sw=2 ts=2 et
    autocmd FileType sh         setlocal sw=4 ts=4 et
    autocmd FileType postscr    setlocal sw=4 ts=4 et
    autocmd FileType python     setlocal sw=4 ts=4 et
    autocmd FileType cpp        setlocal sw=4 ts=4 noet
    autocmd FileType cs         setlocal sw=4 ts=4 et
    autocmd FileType yaml       setlocal sw=2 ts=2 et
    autocmd FileType vim        setlocal sw=4 ts=4 et
    autocmd FileType xml        setlocal sw=2 ts=2 et

    au BufNewFile,BufRead *.as	setf actionscript
endif
"}}}
syntax on

" Move Current Directory when opening file {{{
" Disable 2014/12/11 because this config have some plugin worked not file.
"augroup filelcd
"	autocmd!
"	autocmd BufEnter * lcd %:p:h
"augroup END
" }}}

" Easy  Todo {{{
" Replace todo list on/off on Visual mode and Normal mode
" [TODO] plugin
let g:toggle_complete_tag = 'Done'
nn <buffer> <Leader><Leader> :call ToggleCheckbox()<CR>
vn <buffer> <Leader><Leader> :call ToggleCheckbox()<CR>
function! ToggleCheckbox()
    let l:line = getline('.')
    if l:line =~ '^\-\s\[\s\]'
        let l:result = substitute(l:line, '^-\s\[\s]', '- [x]', '') . ' [' . g:toggle_complete_tag . ':' . strftime('%Y/%m/%d %H:%M') . ']'
        call setline('.', l:result)
    elseif l:line =~ '^\-\s\[x\]'
        let l:result = substitute( substitute(l:line, '^-\s\[x\]', '- [ ]', '') , '\s\[' . g:toggle_complete_tag . ':\d\{4}.\+]$' , '','')
        call setline('.', l:result)
    end
endfunction
" }}}

"IME control for windows
if s:env.is_win
    if !has('gui-running')
        inoremap <silent> <ESC> <ESC>:set iminsert=0<CR>
        inoremap <silent> <C-[> <ESC>
        inoremap <silent> <C-j> <C-^>
    endif
else
    "When enter insert mode, IME recovery.
    "When exit  insert mode, IME off and save.
    set t_SI+=[<r
    set t_EI+=[<s[<0t
    set t_te+=[<0[<s
    "configure ESC wait time
    set ttimeoutlen=100
endif

"Add Encording if not kaoriya vim
if !has('kaoriya')
    set encoding=utf-8
    set fileencodings=ucs-bom,eucjp-ms,sjis,cp932,utf-8
    "set fileencodings=ucs-bom,iso-2022-jp-3,iso-2022-jp,eucjp-ms,euc-jisx0213,euc-jp,sjis,cp932,utf-8
endif

"Add CdCurrent command like kaoriya-gvim and autochdir
if !has('kaoriya')
    command! CdCurrent :cd %:h
    " if exists('+autochdir')
    "     set autochdir
    " endif
endif

" ColorSyntax
if g:supports.plugin_loaded
    if exists('syntax_on')
        syntax reset
    endif
    if s:env.is_win
        set background=dark
        colorscheme term_forrest
    else
        set background=light
        colorscheme lucius
    endif
else
    set background=dark
    colorscheme evening
endif


"----------------------------------------
" }}} End of Configure Plugins
"----------------------------------------

" Load Local Setting {{{
if isdirectory( expand( s:env.path.user . '/' . s:env.path.local ) )
    execute 'set runtimepath+=' . s:env.path.user
    execute 'runtime! ' . s:env.path.local . '/' . '*vim'
    execute 'set runtimepath-=' . s:env.path.user
endif
" }}}

"------------------------------
" Configure Plugins {{{
"------------------------------
if g:supports.plugin_loaded
    "let g:extra_whitespace_ignored_filetypes = ['unite', 'calendar', 'help', 'nerdtree', 'thumbnail', 'tweetvim', 'vimfiler', 'vimshell']
    let g:indentLine_fileTypeExclude = ['help', 'nerdtree', 'unite', 'calendar', 'thumbnail', 'tweetvim']

    let year = strftime('%Y', localtime())
    let g:calendar_cache_directory = $mynotedir . '\\@achive\\vim\\calendar'
    let g:memolist_path = $mynotedir . '\\@achive\\memo\\year'
endif

let $tododir = $mynotedir . '\\@achive\\vim\\wiki'
let $todofile = $tododir . '\\index.wiki'
command! Todo edit $todofile

let wiki_1 = {}
let wiki_1.path = $tododir
let wiki_1.auto_toc = 1
let g:vimwiki_list = [wiki_1]

" vim: set ts=4 sw=4 smarttab expandtab :
"%EOF
